// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "command.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace wlanadb {
namespace data {

void protobuf_ShutdownFile_command_2eproto() {
  delete Command::default_instance_;
}

void protobuf_AddDesc_command_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  Command::default_instance_ = new Command();
  Command::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_command_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_command_2eproto {
  StaticDescriptorInitializer_command_2eproto() {
    protobuf_AddDesc_command_2eproto();
  }
} static_descriptor_initializer_command_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int Command::kPinFieldNumber;
const int Command::kCommandFieldNumber;
const int Command::kParamsFieldNumber;
const int Command::kLengthFieldNumber;
const int Command::kChecksumFieldNumber;
#endif  // !_MSC_VER

Command::Command()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void Command::InitAsDefaultInstance() {
}

Command::Command(const Command& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void Command::SharedCtor() {
  _cached_size_ = 0;
  pin_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  command_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  length_ = GOOGLE_ULONGLONG(0);
  checksum_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Command::~Command() {
  SharedDtor();
}

void Command::SharedDtor() {
  if (pin_ != &::google::protobuf::internal::kEmptyString) {
    delete pin_;
  }
  if (command_ != &::google::protobuf::internal::kEmptyString) {
    delete command_;
  }
  if (checksum_ != &::google::protobuf::internal::kEmptyString) {
    delete checksum_;
  }
  if (this != default_instance_) {
  }
}

void Command::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Command& Command::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_command_2eproto();  return *default_instance_;
}

Command* Command::default_instance_ = NULL;

Command* Command::New() const {
  return new Command;
}

void Command::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_pin()) {
      if (pin_ != &::google::protobuf::internal::kEmptyString) {
        pin_->clear();
      }
    }
    if (has_command()) {
      if (command_ != &::google::protobuf::internal::kEmptyString) {
        command_->clear();
      }
    }
    length_ = GOOGLE_ULONGLONG(0);
    if (has_checksum()) {
      if (checksum_ != &::google::protobuf::internal::kEmptyString) {
        checksum_->clear();
      }
    }
  }
  params_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool Command::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string pin = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pin()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_command;
        break;
      }
      
      // optional string command = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_command:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_command()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_params;
        break;
      }
      
      // repeated string params = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_params:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_params()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_params;
        if (input->ExpectTag(32)) goto parse_length;
        break;
      }
      
      // optional uint64 length = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &length_)));
          set_has_length();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_checksum;
        break;
      }
      
      // optional string checksum = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_checksum:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_checksum()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Command::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string pin = 1;
  if (has_pin()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->pin(), output);
  }
  
  // optional string command = 2;
  if (has_command()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->command(), output);
  }
  
  // repeated string params = 3;
  for (int i = 0; i < this->params_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->params(i), output);
  }
  
  // optional uint64 length = 4;
  if (has_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->length(), output);
  }
  
  // optional string checksum = 5;
  if (has_checksum()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->checksum(), output);
  }
  
}

int Command::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string pin = 1;
    if (has_pin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pin());
    }
    
    // optional string command = 2;
    if (has_command()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->command());
    }
    
    // optional uint64 length = 4;
    if (has_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->length());
    }
    
    // optional string checksum = 5;
    if (has_checksum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->checksum());
    }
    
  }
  // repeated string params = 3;
  total_size += 1 * this->params_size();
  for (int i = 0; i < this->params_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->params(i));
  }
  
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Command::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Command*>(&from));
}

void Command::MergeFrom(const Command& from) {
  GOOGLE_CHECK_NE(&from, this);
  params_.MergeFrom(from.params_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pin()) {
      set_pin(from.pin());
    }
    if (from.has_command()) {
      set_command(from.command());
    }
    if (from.has_length()) {
      set_length(from.length());
    }
    if (from.has_checksum()) {
      set_checksum(from.checksum());
    }
  }
}

void Command::CopyFrom(const Command& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Command::IsInitialized() const {
  
  return true;
}

void Command::Swap(Command* other) {
  if (other != this) {
    std::swap(pin_, other->pin_);
    std::swap(command_, other->command_);
    params_.Swap(&other->params_);
    std::swap(length_, other->length_);
    std::swap(checksum_, other->checksum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Command::GetTypeName() const {
  return "com.wlanadb.data.Command";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace data
}  // namespace wlanadb
}  // namespace com

// @@protoc_insertion_point(global_scope)
